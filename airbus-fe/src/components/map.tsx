"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/vUsP4pcWnrM
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useRouter, useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import Image from "next/image";

export function Map() {
  const router = useRouter();

  const params = useSearchParams();

  const departure = params.get("departure");
  const arrival = params.get("arrival");

  const [dep, setDep] = useState(departure || "");
  const [arr, setArr] = useState(arrival || "");

  const [flightPlan, setFlightPlan] = useState<{
    state: "not-loaded" | "loading" | "loaded" | "error";
    data: string | null;
  }>({
    state: "not-loaded",
    data: null,
  });

  useEffect(() => {
    if (!departure || !arrival) {
      setFlightPlan({ state: "not-loaded", data: null });
      return;
    }
    setFlightPlan({ state: "loading", data: null });
    fetch(`http://127.0.0.1:5000/plot?origin=${departure}&dest=${arrival}`)
      .then((res) => res.json())
      .then((data) => {
        if (data.uri === "error") {
          setFlightPlan({ state: "error", data: null });
          return;
        }
        setFlightPlan({
          state: "loaded",
          data: `http://127.0.0.1:5000/${data.uri}`,
        });
      })
      .catch((err) => {
        setFlightPlan({ state: "error", data: null });
      });
  }, [departure, arrival]);

  return (
    <div className="grid min-h-screen w-full lg:grid-cols-[400px_1fr]">
      <div className="flex flex-col gap-6 bg-gray-100 p-12 dark:bg-gray-800">
        <div className="space-y-4">
          <h1 className="text-3xl font-bold">Flight Planner</h1>
          <p className="text-gray-500 dark:text-gray-400">
            Enter your flight details to see the route on the map and the
            current weather conditions.
          </p>
        </div>
        <form
          className="space-y-4"
          onSubmit={(e) => {
            e.preventDefault();
            router.push(`?departure=${dep}&arrival=${arr}`);
          }}
        >
          <div className="space-y-1">
            <Label htmlFor="departure">Departure Airport</Label>
            <Input
              id="departure"
              placeholder="Enter departure airport"
              type="text"
              value={dep}
              onChange={(e) => setDep(e.target.value)}
            />
          </div>
          <div className="space-y-1">
            <Label htmlFor="arrival">Arrival Airport</Label>
            <Input
              id="arrival"
              placeholder="Enter arrival airport"
              type="text"
              value={arr}
              onChange={(e) => setArr(e.target.value)}
            />
          </div>
          <Button className="w-full" type="submit">
            Plan Flight
          </Button>
        </form>
        <div className="bg-gray-200 p-4 rounded-md dark:bg-gray-700">
          <div className="flex items-center gap-4">
            <WindIcon className="w-8 h-8 text-gray-500 dark:text-gray-400" />
            <div>
              <h3 className="text-lg font-medium">Current Weather</h3>
              <p className="text-gray-500 dark:text-gray-400">Sunny, 25Â°C</p>
            </div>
          </div>
        </div>
      </div>
      <div className="flex h-full w-full items-center justify-center bg-gray-100 dark:bg-gray-800">
        <div className="h-[80vh] w-full flex items-center justify-center">
          {flightPlan.state === "error" && <p>Error loading flight plan.</p>}
          {flightPlan.state === "not-loaded" && <p>Please select from left.</p>}
          {flightPlan.state === "loading" && <p>Loading...</p>}
          {flightPlan.state === "loaded" && (
            <Image
              src={flightPlan.data!}
              alt="Map"
              objectFit="contain"
              width={800}
              height={600}
            />
          )}
        </div>
      </div>
    </div>
  );
}

function WindIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17.7 7.7a2.5 2.5 0 1 1 1.8 4.3H2" />
      <path d="M9.6 4.6A2 2 0 1 1 11 8H2" />
      <path d="M12.6 19.4A2 2 0 1 0 14 16H2" />
    </svg>
  );
}
